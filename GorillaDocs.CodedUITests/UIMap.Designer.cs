// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace GorillaDocs.CodedUITests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AssertNewDocumentButtonExists - Use 'AssertNewDocumentButtonExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertNewDocumentButtonExists()
        {
            #region Variable Declarations
            WinButton uINewDocumentButton = this.UIBlankdocxWordWindow.UIItemWindow.UITemplatesToolBar.UINewDocumentButton;
            #endregion

            // Verify that the 'Exists' property of 'New Document' button equals 'True'
            Assert.AreEqual(this.AssertNewDocumentButtonExistsExpectedValues.UINewDocumentButtonExists, uINewDocumentButton.Exists, "Missing!");
        }
        
        /// <summary>
        /// FindNewDocumentButton
        /// </summary>
        public void FindNewDocumentButton()
        {
            #region Variable Declarations
            WinButton uINewDocumentButton = this.UIDocument2WordWindow.UIItemWindow.UITemplatesToolBar.UINewDocumentButton;
            #endregion

            // Click 'New Document' button
            Mouse.Click(uINewDocumentButton, new Point(36, 46));
        }
        
        /// <summary>
        /// OpenBlank - Use 'OpenBlankParams' to pass parameters into this method.
        /// </summary>
        public void OpenBlank()
        {
            #region Variable Declarations
            WinClient uIMicrosoftWordDocumenClient = this.UIDocument2WordWindow.UIDocument2Client.UIMicrosoftWordDocumenClient;
            WinButton uIBlankdocxButton = this.UIDocument2WordWindow.UIBlankdocxListItem.UIBlankdocxButton;
            #endregion

            // Wait for 5 seconds for user delay between actions; Type 'Control + o' in 'Microsoft Word Document' client
            Playback.Wait(5000);
            Keyboard.SendKeys(uIMicrosoftWordDocumenClient, this.OpenBlankParams.UIMicrosoftWordDocumenClientSendKeys, ModifierKeys.Control);

            // Click 'Blank.docx' button
            Mouse.Click(uIBlankdocxButton, new Point(213, 17));
        }
        
        /// <summary>
        /// OpenBlank1 - Use 'OpenBlank1Params' to pass parameters into this method.
        /// </summary>
        public void OpenBlank1()
        {
            #region Variable Declarations
            WinClient uIMicrosoftWordDocumenClient = this.UIDocument1WordWindow.UIDocument1Client.UIMicrosoftWordDocumenClient;
            WinTabPage uIComputerTabPage = this.UIDocument1WordWindow.UIItemGroup.UIComputerTabPage;
            WinButton uIBrowseButton = this.UIDocument1WordWindow.UIPickaFolderGroup.UIBrowseButton;
            WinComboBox uIFilenameComboBox = this.UIOpenWindow.UIItemWindow.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UIOpenWindow.UIItemWindow1.UIFilenameEdit;
            #endregion

            // Press keyboard shortcut keys 'Windows + 4'
            Keyboard.SendKeys(this.OpenBlank1Params.SendKeys, ModifierKeys.Windows);

            // Type 'Control + o' in 'Microsoft Word Document' client
            Keyboard.SendKeys(uIMicrosoftWordDocumenClient, this.OpenBlank1Params.UIMicrosoftWordDocumenClientSendKeys, ModifierKeys.Control);

            // Click 'Computer' tab
            Mouse.Click(uIComputerTabPage, new Point(144, 31));

            // Click 'Browse' button
            Mouse.Click(uIBrowseButton, new Point(79, 53));

            // Select 'c:\Repos\GorillaDocs\GorillaDocs.CodedUITests\Sample data\Blank.docx' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.OpenBlank1Params.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.OpenBlank1Params.UIFilenameEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinButton uIBCCFileNoteButton = this.UIBlankdocxWordWindow.UIItemWindow.UITemplatesToolBar.UIBCCFileNoteButton;
            #endregion

            // Verify that the 'Exists' property of 'BCC FileNote' button equals 'True'
            Assert.IsTrue(uIBCCFileNoteButton.Exists);
        }
        
        /// <summary>
        /// FileOpenMenu
        /// </summary>
        public void FileOpenMenu()
        {
            #region Variable Declarations
            WinButton uIFileTabButton = this.UIDocument1WordWindow.UIItemWindow.UIRibbonPropertyPage.UIFileTabButton;
            WinTabPage uIOpenTabPage = this.UIDocument1WordWindow.UIFileMenuBar.UIOpenTabPage;
            WinTabPage uINewTabPage = this.UIDocument1WordWindow.UIFileMenuBar.UINewTabPage;
            #endregion

            // Click 'File Tab' button
            Mouse.Click(uIFileTabButton, new Point(42, 18));

            // Click 'Open' tab
            Mouse.Click(uIOpenTabPage, new Point(67, 7));

            // Click 'New' tab
            Mouse.Click(uINewTabPage, new Point(77, 33));

            // Click 'Open' tab
            Mouse.Click(uIOpenTabPage, new Point(74, 16));
        }
        
        #region Properties
        public virtual AssertNewDocumentButtonExistsExpectedValues AssertNewDocumentButtonExistsExpectedValues
        {
            get
            {
                if ((this.mAssertNewDocumentButtonExistsExpectedValues == null))
                {
                    this.mAssertNewDocumentButtonExistsExpectedValues = new AssertNewDocumentButtonExistsExpectedValues();
                }
                return this.mAssertNewDocumentButtonExistsExpectedValues;
            }
        }
        
        public virtual OpenBlankParams OpenBlankParams
        {
            get
            {
                if ((this.mOpenBlankParams == null))
                {
                    this.mOpenBlankParams = new OpenBlankParams();
                }
                return this.mOpenBlankParams;
            }
        }
        
        public virtual OpenBlank1Params OpenBlank1Params
        {
            get
            {
                if ((this.mOpenBlank1Params == null))
                {
                    this.mOpenBlank1Params = new OpenBlank1Params();
                }
                return this.mOpenBlank1Params;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public UIDocument2WordWindow UIDocument2WordWindow
        {
            get
            {
                if ((this.mUIDocument2WordWindow == null))
                {
                    this.mUIDocument2WordWindow = new UIDocument2WordWindow();
                }
                return this.mUIDocument2WordWindow;
            }
        }
        
        public UISelectTemplateWindow UISelectTemplateWindow
        {
            get
            {
                if ((this.mUISelectTemplateWindow == null))
                {
                    this.mUISelectTemplateWindow = new UISelectTemplateWindow();
                }
                return this.mUISelectTemplateWindow;
            }
        }
        
        public UIBlankdocxWordWindow UIBlankdocxWordWindow
        {
            get
            {
                if ((this.mUIBlankdocxWordWindow == null))
                {
                    this.mUIBlankdocxWordWindow = new UIBlankdocxWordWindow();
                }
                return this.mUIBlankdocxWordWindow;
            }
        }
        
        public UIDocument1WordWindow UIDocument1WordWindow
        {
            get
            {
                if ((this.mUIDocument1WordWindow == null))
                {
                    this.mUIDocument1WordWindow = new UIDocument1WordWindow();
                }
                return this.mUIDocument1WordWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertNewDocumentButtonExistsExpectedValues mAssertNewDocumentButtonExistsExpectedValues;
        
        private OpenBlankParams mOpenBlankParams;
        
        private OpenBlank1Params mOpenBlank1Params;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private UIDocument2WordWindow mUIDocument2WordWindow;
        
        private UISelectTemplateWindow mUISelectTemplateWindow;
        
        private UIBlankdocxWordWindow mUIBlankdocxWordWindow;
        
        private UIDocument1WordWindow mUIDocument1WordWindow;
        
        private UIOpenWindow mUIOpenWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertNewDocumentButtonExists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertNewDocumentButtonExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'New Document' button equals 'True'
        /// </summary>
        public bool UINewDocumentButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenBlank'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class OpenBlankParams
    {
        
        #region Fields
        /// <summary>
        /// Wait for 5 seconds for user delay between actions; Type 'Control + o' in 'Microsoft Word Document' client
        /// </summary>
        public string UIMicrosoftWordDocumenClientSendKeys = "o";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenBlank1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class OpenBlank1Params
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + 4'
        /// </summary>
        public string SendKeys = "4";
        
        /// <summary>
        /// Type 'Control + o' in 'Microsoft Word Document' client
        /// </summary>
        public string UIMicrosoftWordDocumenClientSendKeys = "o";
        
        /// <summary>
        /// Select 'c:\Repos\GorillaDocs\GorillaDocs.CodedUITests\Sample data\Blank.docx' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "c:\\Repos\\GorillaDocs\\GorillaDocs.CodedUITests\\Sample data\\Blank.docx";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'BCC FileNote' button equals 'True'
        /// </summary>
        public bool UIBCCFileNoteButtonExists = true;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDocument2WordWindow : WinWindow
    {
        
        public UIDocument2WordWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Document2 - Word";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "OpusApp";
            this.WindowTitles.Add("Document2 - Word");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIDocument2Client UIDocument2Client
        {
            get
            {
                if ((this.mUIDocument2Client == null))
                {
                    this.mUIDocument2Client = new UIDocument2Client(this);
                }
                return this.mUIDocument2Client;
            }
        }
        
        public UIBlankdocxListItem UIBlankdocxListItem
        {
            get
            {
                if ((this.mUIBlankdocxListItem == null))
                {
                    this.mUIBlankdocxListItem = new UIBlankdocxListItem(this);
                }
                return this.mUIBlankdocxListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIDocument2Client mUIDocument2Client;
        
        private UIBlankdocxListItem mUIBlankdocxListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Ribbon";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "NetUIHWND";
            this.WindowTitles.Add("Document2 - Word");
            #endregion
        }
        
        #region Properties
        public UITemplatesToolBar UITemplatesToolBar
        {
            get
            {
                if ((this.mUITemplatesToolBar == null))
                {
                    this.mUITemplatesToolBar = new UITemplatesToolBar(this);
                }
                return this.mUITemplatesToolBar;
            }
        }
        #endregion
        
        #region Fields
        private UITemplatesToolBar mUITemplatesToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITemplatesToolBar : WinToolBar
    {
        
        public UITemplatesToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Templates";
            this.WindowTitles.Add("Document2 - Word");
            #endregion
        }
        
        #region Properties
        public WinButton UINewDocumentButton
        {
            get
            {
                if ((this.mUINewDocumentButton == null))
                {
                    this.mUINewDocumentButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINewDocumentButton.SearchProperties[WinButton.PropertyNames.Name] = "New Document";
                    this.mUINewDocumentButton.WindowTitles.Add("Document2 - Word");
                    #endregion
                }
                return this.mUINewDocumentButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINewDocumentButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDocument2Client : WinClient
    {
        
        public UIDocument2Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Document2";
            this.WindowTitles.Add("Document2 - Word");
            #endregion
        }
        
        #region Properties
        public WinClient UIMicrosoftWordDocumenClient
        {
            get
            {
                if ((this.mUIMicrosoftWordDocumenClient == null))
                {
                    this.mUIMicrosoftWordDocumenClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIMicrosoftWordDocumenClient.SearchProperties[WinControl.PropertyNames.Name] = "Microsoft Word Document";
                    this.mUIMicrosoftWordDocumenClient.WindowTitles.Add("Document2 - Word");
                    #endregion
                }
                return this.mUIMicrosoftWordDocumenClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIMicrosoftWordDocumenClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIBlankdocxListItem : WinListItem
    {
        
        public UIBlankdocxListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Blank.docx";
            this.WindowTitles.Add("Document2 - Word");
            #endregion
        }
        
        #region Properties
        public WinButton UIBlankdocxButton
        {
            get
            {
                if ((this.mUIBlankdocxButton == null))
                {
                    this.mUIBlankdocxButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIBlankdocxButton.SearchProperties[WinButton.PropertyNames.Name] = "Blank.docx";
                    this.mUIBlankdocxButton.WindowTitles.Add("Document2 - Word");
                    #endregion
                }
                return this.mUIBlankdocxButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIBlankdocxButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISelectTemplateWindow : WpfWindow
    {
        
        public UISelectTemplateWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Select Template";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Select Template");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TeamViewer_TitleBarButtonClass";
            #endregion
        }
        
        #region Properties
        public WpfButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnCancel";
                    this.mUICancelButton.WindowTitles.Add("Select Template");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIBlankdocxWordWindow : WinWindow
    {
        
        public UIBlankdocxWordWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Blank.docx - Word";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "OpusApp";
            this.WindowTitles.Add("Blank.docx - Word");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Ribbon";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "NetUIHWND";
            this.WindowTitles.Add("Blank.docx - Word");
            #endregion
        }
        
        #region Properties
        public UITemplatesToolBar1 UITemplatesToolBar
        {
            get
            {
                if ((this.mUITemplatesToolBar == null))
                {
                    this.mUITemplatesToolBar = new UITemplatesToolBar1(this);
                }
                return this.mUITemplatesToolBar;
            }
        }
        #endregion
        
        #region Fields
        private UITemplatesToolBar1 mUITemplatesToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITemplatesToolBar1 : WinToolBar
    {
        
        public UITemplatesToolBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Templates";
            this.WindowTitles.Add("Blank.docx - Word");
            #endregion
        }
        
        #region Properties
        public WinButton UINewDocumentButton
        {
            get
            {
                if ((this.mUINewDocumentButton == null))
                {
                    this.mUINewDocumentButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINewDocumentButton.SearchProperties[WinButton.PropertyNames.Name] = "New Document";
                    this.mUINewDocumentButton.WindowTitles.Add("Blank.docx - Word");
                    #endregion
                }
                return this.mUINewDocumentButton;
            }
        }
        
        public WinButton UIBCCFileNoteButton
        {
            get
            {
                if ((this.mUIBCCFileNoteButton == null))
                {
                    this.mUIBCCFileNoteButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIBCCFileNoteButton.SearchProperties[WinButton.PropertyNames.Name] = "BCC FileNote";
                    this.mUIBCCFileNoteButton.WindowTitles.Add("Blank.docx - Word");
                    #endregion
                }
                return this.mUIBCCFileNoteButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINewDocumentButton;
        
        private WinButton mUIBCCFileNoteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDocument1WordWindow : WinWindow
    {
        
        public UIDocument1WordWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Document1 - Word";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "OpusApp";
            this.WindowTitles.Add("Document1 - Word");
            #endregion
        }
        
        #region Properties
        public UIDocument1Client UIDocument1Client
        {
            get
            {
                if ((this.mUIDocument1Client == null))
                {
                    this.mUIDocument1Client = new UIDocument1Client(this);
                }
                return this.mUIDocument1Client;
            }
        }
        
        public UIItemGroup UIItemGroup
        {
            get
            {
                if ((this.mUIItemGroup == null))
                {
                    this.mUIItemGroup = new UIItemGroup(this);
                }
                return this.mUIItemGroup;
            }
        }
        
        public UIPickaFolderGroup UIPickaFolderGroup
        {
            get
            {
                if ((this.mUIPickaFolderGroup == null))
                {
                    this.mUIPickaFolderGroup = new UIPickaFolderGroup(this);
                }
                return this.mUIPickaFolderGroup;
            }
        }
        
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIFileMenuBar UIFileMenuBar
        {
            get
            {
                if ((this.mUIFileMenuBar == null))
                {
                    this.mUIFileMenuBar = new UIFileMenuBar(this);
                }
                return this.mUIFileMenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIDocument1Client mUIDocument1Client;
        
        private UIItemGroup mUIItemGroup;
        
        private UIPickaFolderGroup mUIPickaFolderGroup;
        
        private UIItemWindow3 mUIItemWindow;
        
        private UIFileMenuBar mUIFileMenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDocument1Client : WinClient
    {
        
        public UIDocument1Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Document1";
            this.WindowTitles.Add("Document1 - Word");
            #endregion
        }
        
        #region Properties
        public WinClient UIMicrosoftWordDocumenClient
        {
            get
            {
                if ((this.mUIMicrosoftWordDocumenClient == null))
                {
                    this.mUIMicrosoftWordDocumenClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIMicrosoftWordDocumenClient.SearchProperties[WinControl.PropertyNames.Name] = "Microsoft Word Document";
                    this.mUIMicrosoftWordDocumenClient.WindowTitles.Add("Document1 - Word");
                    #endregion
                }
                return this.mUIMicrosoftWordDocumenClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIMicrosoftWordDocumenClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemGroup : WinGroup
    {
        
        public UIItemGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Document1 - Word");
            #endregion
        }
        
        #region Properties
        public WinTabPage UIComputerTabPage
        {
            get
            {
                if ((this.mUIComputerTabPage == null))
                {
                    this.mUIComputerTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIComputerTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Computer";
                    this.mUIComputerTabPage.WindowTitles.Add("Document1 - Word");
                    #endregion
                }
                return this.mUIComputerTabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUIComputerTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIPickaFolderGroup : WinGroup
    {
        
        public UIPickaFolderGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Pick a Folder";
            this.WindowTitles.Add("Document1 - Word");
            #endregion
        }
        
        #region Properties
        public WinButton UIBrowseButton
        {
            get
            {
                if ((this.mUIBrowseButton == null))
                {
                    this.mUIBrowseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIBrowseButton.SearchProperties[WinButton.PropertyNames.Name] = "Browse";
                    this.mUIBrowseButton.WindowTitles.Add("Document1 - Word");
                    #endregion
                }
                return this.mUIBrowseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIBrowseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Ribbon";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "NetUIHWND";
            this.WindowTitles.Add("Document1 - Word");
            #endregion
        }
        
        #region Properties
        public UIRibbonPropertyPage UIRibbonPropertyPage
        {
            get
            {
                if ((this.mUIRibbonPropertyPage == null))
                {
                    this.mUIRibbonPropertyPage = new UIRibbonPropertyPage(this);
                }
                return this.mUIRibbonPropertyPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRibbonPropertyPage mUIRibbonPropertyPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIRibbonPropertyPage : WinControl
    {
        
        public UIRibbonPropertyPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Ribbon";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
            this.WindowTitles.Add("Document1 - Word");
            #endregion
        }
        
        #region Properties
        public WinButton UIFileTabButton
        {
            get
            {
                if ((this.mUIFileTabButton == null))
                {
                    this.mUIFileTabButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIFileTabButton.SearchProperties[WinButton.PropertyNames.Name] = "File Tab";
                    this.mUIFileTabButton.WindowTitles.Add("Document1 - Word");
                    #endregion
                }
                return this.mUIFileTabButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIFileTabButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFileMenuBar : WinMenuBar
    {
        
        public UIFileMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Document1 - Word");
            #endregion
        }
        
        #region Properties
        public WinTabPage UIOpenTabPage
        {
            get
            {
                if ((this.mUIOpenTabPage == null))
                {
                    this.mUIOpenTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIOpenTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Open";
                    this.mUIOpenTabPage.WindowTitles.Add("Document1 - Word");
                    #endregion
                }
                return this.mUIOpenTabPage;
            }
        }
        
        public WinTabPage UINewTabPage
        {
            get
            {
                if ((this.mUINewTabPage == null))
                {
                    this.mUINewTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUINewTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "New";
                    this.mUINewTabPage.WindowTitles.Add("Document1 - Word");
                    #endregion
                }
                return this.mUINewTabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUIOpenTabPage;
        
        private WinTabPage mUINewTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow4 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
}
